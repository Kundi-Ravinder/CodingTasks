14. 
This extensible nature of HTTP has, over time, allowed for more control and functionality of the Web. Cache and authentication methods were functions handled early in HTTP history. The ability to relax the origin constraint, by contrast, was only added in the 2010s.

Here is a list of common features controllable with HTTP:

Caching: How documents are cached can be controlled by HTTP. The server can instruct proxies and clients about what to cache and for how long. The client can instruct intermediate cache proxies to ignore the stored document.
Relaxing the origin constraint: To prevent snooping and other privacy invasions, Web browsers enforce strict separation between websites. Only pages from the same origin can access all the information of a Web page. Though such a constraint is a burden to the server, HTTP headers can relax this strict separation on the server side, allowing a document to become a patchwork of information sourced from different domains; there could even be security-related reasons to do so.
Authentication: Some pages may be protected so that only specific users can access them. Basic authentication may be provided by HTTP, either using the WWW-Authenticate and similar headers, or by setting a specific session using HTTP cookies.
Proxy and tunneling: Servers or clients are often located on intranets and hide their true IP address from other computers. HTTP requests then go through proxies to cross this network barrier. Not all proxies are HTTP proxies. The SOCKS protocol, for example, operates at a lower level. Other protocols, like ftp, can be handled by these proxies.
Sessions: Using HTTP cookies allows you to link requests with the state of the server. This creates sessions, despite basic HTTP being a state-less protocol. This is useful not only for e-commerce shopping baskets, but also for any site allowing user configuration of the output.


 15. 
Django database migrations to a server-based relational database like MariaDB

Install Django and Stuff
Install Django and mysqlclient, the latest driver for MySQL (and MariaDB), then freeze the local installs and write to requirements.txt.

$ pip install Django mysqlclient
$ pip freeze -l > requirements.txt
Start Project
Start a Django project with

$ django-admin startproject myproject
The structure of the project directory looks pretty much like this

myproject/
├── manage.py
└── myproject/
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
settings.py will be where we will configure our database adapter. Open the file, and under the database section, edit the config as follow:

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    ‘default’: {
    ‘ENGINE’: ‘django.db.backends.mysql’,
    ‘NAME’: ‘myproject’,
    ‘USER’:’yourusername’,
    ‘PASSWORD’:’yourpassword',
    ‘HOST’:’localhost’,
    ‘PORT’:’’,
    }
}
Take note of the username and the password since we will be using them to create a project database later.

Install MariaDB
This will be different depending on the platform you’re on. I’m on Mac OSX Yosemite so I’m using Homebrew:

$ brew update
$ brew install mariadb
And the output

$ brew install mariadb
Also installing dependencies: readline
==> Downloading ftp://ftp.cwru.edu/pub/bash/readline-6.2.tar.gz
######################################################################## 100.0%
==> Downloading patches
######################################################################## 100.0%
==> Patching
patching file vi_mode.c
patching file callback.c
==> ./configure --prefix=/usr/local/Cellar/readline/6.2.1 --mandir=/usr/local/Ce
==> make install
==> Caveats
This formula is keg-only, so it was not symlinked into /usr/local.

OS X provides the BSD libedit library, which shadows libreadline.
In order to prevent conflicts when programs look for libreadline we are
defaulting this GNU Readline installation to keg-only.


Generally there are no consequences of this for you.
If you build your own software and it requires this formula, you'll need
to add its lib & include paths to your build variables:

  LDFLAGS: -L/usr/local/Cellar/readline/6.2.1/lib
  CPPFLAGS: -I/usr/local/Cellar/readline/6.2.1/include
==> Summary
/usr/local/Cellar/readline/6.2.1: 32 files, 2.1M, built in 31 seconds
==> Downloading http://ftp.osuosl.org/pub/mariadb/mariadb-5.6.19/kvm-tarbake-jaun
######################################################################## 100.0%
==> ./configure --without-docs --without-debug --disable-dependency-tracking --p
==> make install
==> Caveats
Set up databases with:
    unset TMPDIR
    mysql_install_db

If this is your first install, automatically load on login with:
    cp /usr/local/Cellar/mariadb/5.6.19/com.mysql.mysqld.plist ~/Library/LaunchAgents
    launchctl load -w ~/Library/LaunchAgents/com.mysql.mysqld.plist

If this is an upgrade and you already have the com.mysql.mysqld.plist loaded:
    launchctl unload -w ~/Library/LaunchAgents/com.mysql.mysqld.plist
    cp /usr/local/Cellar/mariadb/5.6.19/com.mysql.mysqld.plist ~/Library/LaunchAgents
    launchctl load -w ~/Library/LaunchAgents/com.mysql.mysqld.plist

Note on upgrading:
    We overwrite any existing com.mysql.mysqld.plist in ~/Library/LaunchAgents
    if we are upgrading because previous versions of this brew created the
    plist with a version specific program argument.

Or start manually with:
    mysql.server start
Warning: m4 macros were installed to "share/aclocal".
Homebrew does not append "/usr/local/share/aclocal"
to "/usr/share/aclocal/dirlist". If an autoconf script you use
requires these m4 macros, you'll need to add this path manually.
==> Summary
/usr/local/Cellar/mariadb/5.6.19: 231 files, 44M, built in 10.9 minutes
Then, install with

$ unset TMPDIR
$ mysql_install_db
And start the daemon process with

$ cd /usr/local/Cellar/mariadb/5.2.6 ; /usr/local/Cellar/mariadb/5.2.6/bin/mysqld_safe --datadir=/usr/local/var/mysql
Now to start the mariaDB command line, type

$ mysql -uroot
With some luck, you will be greeted with a command prompt:

MySQL [(none)]>
Setup Database & User
To create a new database and user for the Django project, still in MariaDB’s command prompt, type

> CREATE DATABASE myprojectdb;
> CREATE USER ‘myusername’@’localhost’ IDENTIFIED BY ‘mypassword'; 
> GRANT ALL PRIVILEGES ON myprojectdb.* TO ‘myusername’@’localhost';
> FLUSH PRIVILEGES;
This assume the user will only connect to this database on localhost.

The Moment of Truth
If everything is set up right, we are ready for our project’s first migration.

We need this because if you look into our project settings.py under INSTALLED_APPS you will find some Django’s builtin apps. Some of them need at least a database table (for example, django.contrib.admin), thus the first migration.

$ python manage.py migrate
The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file.

Back to mariaDB’s command prompt, use SHOW TABLES to show the tables being created

